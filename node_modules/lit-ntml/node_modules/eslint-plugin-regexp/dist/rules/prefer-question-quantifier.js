"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
exports.default = utils_1.createRule("prefer-question-quantifier", {
    meta: {
        docs: {
            description: "enforce using `?` quantifier",
            recommended: true,
        },
        fixable: "code",
        schema: [],
        messages: {
            unexpected: 'Unexpected quantifier "{{expr}}". Use "?" instead.',
            unexpectedGroup: 'Unexpected group "{{expr}}". Use "{{instead}}" instead.',
        },
        type: "suggestion",
    },
    create(context) {
        const sourceCode = context.getSourceCode();
        function createVisitor(node) {
            return {
                onQuantifierEnter(qNode) {
                    if (qNode.min === 0 && qNode.max === 1) {
                        const [startOffset, endOffset] = utils_1.getQuantifierOffsets(qNode);
                        const text = qNode.raw.slice(startOffset, endOffset);
                        if (text !== "?") {
                            context.report({
                                node,
                                loc: utils_1.getRegexpLocation(sourceCode, node, qNode, [startOffset, endOffset]),
                                messageId: "unexpected",
                                data: {
                                    expr: text,
                                },
                                fix(fixer) {
                                    const range = utils_1.getRegexpRange(sourceCode, node, qNode);
                                    if (range == null) {
                                        return null;
                                    }
                                    return fixer.replaceTextRange([
                                        range[0] + startOffset,
                                        range[0] + endOffset,
                                    ], "?");
                                },
                            });
                        }
                    }
                },
                onGroupEnter(gNode) {
                    const nonEmpties = [];
                    const empties = [];
                    for (const alt of gNode.alternatives) {
                        if (alt.elements.length === 0) {
                            empties.push(alt);
                        }
                        else {
                            nonEmpties.push(alt);
                        }
                    }
                    if (empties.length && nonEmpties.length) {
                        const instead = `(?:${nonEmpties
                            .map((ne) => ne.raw)
                            .join("|")})?`;
                        context.report({
                            node,
                            loc: utils_1.getRegexpLocation(sourceCode, node, gNode),
                            messageId: "unexpectedGroup",
                            data: {
                                expr: gNode.raw,
                                instead,
                            },
                            fix(fixer) {
                                const range = utils_1.getRegexpRange(sourceCode, node, gNode);
                                if (range == null) {
                                    return null;
                                }
                                return fixer.replaceTextRange(range, utils_1.fixerApplyEscape(instead, node));
                            },
                        });
                    }
                },
            };
        }
        return utils_1.defineRegexpVisitor(context, {
            createVisitor,
        });
    },
});
