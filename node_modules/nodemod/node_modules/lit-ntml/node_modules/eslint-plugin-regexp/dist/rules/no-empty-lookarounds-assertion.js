"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
exports.default = utils_1.createRule("no-empty-lookarounds-assertion", {
    meta: {
        docs: {
            description: "disallow empty lookahead assertion or empty lookbehind assertion",
            recommended: true,
        },
        schema: [],
        messages: {
            unexpectedLookahead: "Unexpected empty lookahead.",
            unexpectedLookbehind: "Unexpected empty lookbehind.",
        },
        type: "suggestion",
    },
    create(context) {
        const sourceCode = context.getSourceCode();
        function createVisitor(node) {
            return {
                onAssertionEnter(aNode) {
                    if (aNode.kind !== "lookahead" &&
                        aNode.kind !== "lookbehind") {
                        return;
                    }
                    if (aNode.alternatives.every((alt) => alt.elements.length === 0)) {
                        context.report({
                            node,
                            loc: utils_1.getRegexpLocation(sourceCode, node, aNode),
                            messageId: aNode.kind === "lookahead"
                                ? "unexpectedLookahead"
                                : "unexpectedLookbehind",
                        });
                    }
                },
            };
        }
        return utils_1.defineRegexpVisitor(context, {
            createVisitor,
        });
    },
});
