"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
exports.default = utils_1.createRule("prefer-d", {
    meta: {
        docs: {
            description: "enforce using `\\d`",
            recommended: true,
        },
        fixable: "code",
        schema: [],
        messages: {
            unexpected: 'Unexpected character set "{{expr}}". Use "{{instead}}" instead.',
        },
        type: "suggestion",
    },
    create(context) {
        const sourceCode = context.getSourceCode();
        function createVisitor(node) {
            return {
                onCharacterClassRangeEnter(ccrNode) {
                    if (ccrNode.min.value === utils_1.CP_DIGIT_ZERO &&
                        ccrNode.max.value === utils_1.CP_DIGIT_NINE) {
                        let reportNode;
                        let instead;
                        const ccNode = ccrNode.parent;
                        if (ccNode.elements.length === 1) {
                            reportNode = ccNode;
                            instead = ccNode.negate ? "\\D" : "\\d";
                        }
                        else {
                            reportNode = ccrNode;
                            instead = "\\d";
                        }
                        context.report({
                            node,
                            loc: utils_1.getRegexpLocation(sourceCode, node, reportNode),
                            messageId: "unexpected",
                            data: {
                                expr: reportNode.raw,
                                instead,
                            },
                            fix(fixer) {
                                const range = utils_1.getRegexpRange(sourceCode, node, reportNode);
                                if (range == null) {
                                    return null;
                                }
                                return fixer.replaceTextRange(range, utils_1.fixerApplyEscape(instead, node));
                            },
                        });
                    }
                },
            };
        }
        return utils_1.defineRegexpVisitor(context, {
            createVisitor,
        });
    },
});
