"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.invisibleEscape = exports.isInvisible = exports.isWord = exports.isSpace = exports.isDigit = exports.CP_RANGES_WORDS = exports.CP_RANGE_SPACES = exports.CP_RANGE_CAPITAL_LETTER = exports.CP_RANGE_SMALL_LETTER = exports.CP_RANGE_DIGIT = exports.CPS_SINGLE_SPACES = exports.CP_LOW_LINE = exports.CP_CAPITAL_Z = exports.CP_CAPITAL_A = exports.CP_SMALL_Z = exports.CP_SMALL_A = exports.CP_DIGIT_NINE = exports.CP_DIGIT_ZERO = exports.CP_BOM = exports.CP_IDEOGRAPHIC_SPACE = exports.CP_BRAILLE_PATTERN_BLANK = exports.CP_MMSP = exports.CP_NNBSP = exports.CP_PARAGRAPH_SEPARATOR = exports.CP_LINE_SEPARATOR = exports.CP_RLM = exports.CP_LRM = exports.CP_ZWJ = exports.CP_ZWNJ = exports.CP_ZWSP = exports.CP_HAIR_SPACE = exports.CP_EN_QUAD = exports.CP_MONGOLIAN_VOWEL_SEPARATOR = exports.CP_OGHAM_SPACE_MARK = exports.CP_NBSP = exports.CP_NEL = exports.CP_SPACE = exports.CP_CR = exports.CP_FF = exports.CP_VT = exports.CP_LF = exports.CP_TAB = void 0;
exports.CP_TAB = 9;
exports.CP_LF = 10;
exports.CP_VT = 11;
exports.CP_FF = 12;
exports.CP_CR = 13;
exports.CP_SPACE = " ".codePointAt(0);
exports.CP_NEL = "\u0085".codePointAt(0);
exports.CP_NBSP = "\u00a0".codePointAt(0);
exports.CP_OGHAM_SPACE_MARK = "\u1680".codePointAt(0);
exports.CP_MONGOLIAN_VOWEL_SEPARATOR = "\u180e".codePointAt(0);
exports.CP_EN_QUAD = "\u2000".codePointAt(0);
exports.CP_HAIR_SPACE = "\u200a".codePointAt(0);
exports.CP_ZWSP = "\u200b".codePointAt(0);
exports.CP_ZWNJ = "\u200c".codePointAt(0);
exports.CP_ZWJ = "\u200d".codePointAt(0);
exports.CP_LRM = "\u200e".codePointAt(0);
exports.CP_RLM = "\u200f".codePointAt(0);
exports.CP_LINE_SEPARATOR = "\u2028".codePointAt(0);
exports.CP_PARAGRAPH_SEPARATOR = "\u2029".codePointAt(0);
exports.CP_NNBSP = "\u202f".codePointAt(0);
exports.CP_MMSP = "\u205f".codePointAt(0);
exports.CP_BRAILLE_PATTERN_BLANK = "\u2800".codePointAt(0);
exports.CP_IDEOGRAPHIC_SPACE = "\u3000".codePointAt(0);
exports.CP_BOM = "\ufeff".codePointAt(0);
exports.CP_DIGIT_ZERO = "0".codePointAt(0);
exports.CP_DIGIT_NINE = "9".codePointAt(0);
exports.CP_SMALL_A = "a".codePointAt(0);
exports.CP_SMALL_Z = "z".codePointAt(0);
exports.CP_CAPITAL_A = "A".codePointAt(0);
exports.CP_CAPITAL_Z = "Z".codePointAt(0);
exports.CP_LOW_LINE = "_".codePointAt(0);
exports.CPS_SINGLE_SPACES = new Set([
    exports.CP_SPACE,
    exports.CP_TAB,
    exports.CP_CR,
    exports.CP_LF,
    exports.CP_VT,
    exports.CP_FF,
    exports.CP_NBSP,
    exports.CP_OGHAM_SPACE_MARK,
    exports.CP_MONGOLIAN_VOWEL_SEPARATOR,
    exports.CP_LINE_SEPARATOR,
    exports.CP_PARAGRAPH_SEPARATOR,
    exports.CP_NNBSP,
    exports.CP_MMSP,
    exports.CP_IDEOGRAPHIC_SPACE,
    exports.CP_BOM,
]);
exports.CP_RANGE_DIGIT = [exports.CP_DIGIT_ZERO, exports.CP_DIGIT_NINE];
exports.CP_RANGE_SMALL_LETTER = [exports.CP_SMALL_A, exports.CP_SMALL_Z];
exports.CP_RANGE_CAPITAL_LETTER = [exports.CP_CAPITAL_A, exports.CP_CAPITAL_Z];
exports.CP_RANGE_SPACES = [exports.CP_EN_QUAD, exports.CP_HAIR_SPACE];
exports.CP_RANGES_WORDS = [
    exports.CP_RANGE_SMALL_LETTER,
    exports.CP_RANGE_CAPITAL_LETTER,
    exports.CP_RANGE_DIGIT,
];
function isCodePointInRange(codePoint, [start, end]) {
    return start <= codePoint && codePoint <= end;
}
function isDigit(codePoint) {
    return isCodePointInRange(codePoint, exports.CP_RANGE_DIGIT);
}
exports.isDigit = isDigit;
function isSpace(codePoint) {
    return (exports.CPS_SINGLE_SPACES.has(codePoint) ||
        isCodePointInRange(codePoint, exports.CP_RANGE_SPACES));
}
exports.isSpace = isSpace;
function isWord(codePoint) {
    return (exports.CP_RANGES_WORDS.some((range) => isCodePointInRange(codePoint, range)) ||
        exports.CP_LOW_LINE === codePoint);
}
exports.isWord = isWord;
function isInvisible(codePoint) {
    if (isSpace(codePoint)) {
        return true;
    }
    return (codePoint === exports.CP_NEL ||
        codePoint === exports.CP_ZWSP ||
        codePoint === exports.CP_ZWNJ ||
        codePoint === exports.CP_ZWJ ||
        codePoint === exports.CP_LRM ||
        codePoint === exports.CP_RLM ||
        codePoint === exports.CP_BRAILLE_PATTERN_BLANK);
}
exports.isInvisible = isInvisible;
function invisibleEscape(val) {
    let result = "";
    for (const cp of typeof val === "number" ? [val] : codePoints(val)) {
        if (cp !== exports.CP_SPACE && isInvisible(cp)) {
            if (cp === exports.CP_TAB) {
                result += "\\t";
            }
            else if (cp === exports.CP_LF) {
                result += "\\r";
            }
            else if (cp === exports.CP_CR) {
                result += "\\n";
            }
            else if (cp === exports.CP_VT) {
                result += "\\v";
            }
            else if (cp === exports.CP_FF) {
                result += "\\f";
            }
            else {
                result += `\\u${`${cp.toString(16)}`.padStart(4, "0")}`;
            }
        }
        else {
            result += String.fromCodePoint(cp);
        }
    }
    return result;
}
exports.invisibleEscape = invisibleEscape;
function* codePoints(s) {
    for (let i = 0; i < s.length; i += 1) {
        const cp = s.codePointAt(i);
        yield cp;
        if (cp >= 0x10000) {
            i += 1;
        }
    }
}
